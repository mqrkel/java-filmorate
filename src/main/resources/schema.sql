DROP TABLE IF EXISTS film_likes CASCADE;
DROP TABLE IF EXISTS film_genres CASCADE;
DROP TABLE IF EXISTS friendships CASCADE;
DROP TABLE IF EXISTS films CASCADE;
DROP TABLE IF EXISTS genres CASCADE;
DROP TABLE IF EXISTS mpa_ratings CASCADE;
DROP TABLE IF EXISTS users CASCADE;

-- PUBLIC.GENRES
CREATE TABLE IF NOT EXISTS PUBLIC.genres
(
    genre_id INTEGER                NOT NULL AUTO_INCREMENT,
    name     CHARACTER VARYING(128) NOT NULL UNIQUE,
    CONSTRAINT GENRES_PK PRIMARY KEY (genre_id)
);


-- PUBLIC.MPA_RATING
CREATE TABLE IF NOT EXISTS PUBLIC.mpa_ratings
(
    mpa_rating_id INTEGER               NOT NULL AUTO_INCREMENT,
    name          CHARACTER VARYING(50) NOT NULL,
    CONSTRAINT MPA_RATING_CHECK CHECK (name IN ('G', 'PG', 'PG-13', 'R', 'NC-17')),
    CONSTRAINT MPA_RATING_PK PRIMARY KEY (mpa_rating_id)
);
-- PUBLIC.FILMS
CREATE TABLE IF NOT EXISTS PUBLIC.films
(
    film_id       INTEGER                NOT NULL AUTO_INCREMENT,
    title         CHARACTER VARYING(255) NOT NULL,
    description   CHARACTER VARYING(255),
    release_date  DATE                   NOT NULL,
    duration      INTEGER                NOT NULL,
    mpa_rating_id INTEGER                NOT NULL,
    CONSTRAINT FILMS_PK PRIMARY KEY (film_id),
    CONSTRAINT FILMS_MPA_RATING_FK FOREIGN KEY (mpa_rating_id) REFERENCES PUBLIC.mpa_ratings (mpa_rating_id) ON DELETE RESTRICT ON UPDATE RESTRICT
);
CREATE INDEX IF NOT EXISTS FILMS_MPA_RATING_FK_INDEX_3 ON PUBLIC.films (mpa_rating_id);

-- PUBLIC.USERS
CREATE TABLE IF NOT EXISTS PUBLIC.users
(
    user_id    INTEGER                NOT NULL AUTO_INCREMENT,
    email      CHARACTER VARYING(255) NOT NULL,
    full_name  CHARACTER VARYING(128) NOT NULL,
    login      CHARACTER VARYING(128) NOT NULL,
    birth_date DATE                   NOT NULL,
    CONSTRAINT USERS_CHECK CHECK (birth_date <= CURRENT_DATE),
    CONSTRAINT USERS_PK PRIMARY KEY (user_id)
);

-- PUBLIC.FILM_GENRES
CREATE TABLE IF NOT EXISTS PUBLIC.film_genres
(
    film_id  INTEGER NOT NULL,
    genre_id INTEGER NOT NULL,
    CONSTRAINT FILM_GENRES_PK PRIMARY KEY (film_id, genre_id),
    CONSTRAINT FILM_GENRES_FILMS_FK FOREIGN KEY (film_id) REFERENCES PUBLIC.films (film_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FILM_GENRES_GENRES_FK FOREIGN KEY (genre_id) REFERENCES PUBLIC.genres (genre_id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX IF NOT EXISTS FILM_GENRES_FILMS_FK_INDEX_C ON PUBLIC.film_genres (film_id);
CREATE INDEX IF NOT EXISTS FILM_GENRES_GENRES_FK_INDEX_C ON PUBLIC.film_genres (genre_id);

-- PUBLIC.FILM_LIKES
CREATE TABLE IF NOT EXISTS PUBLIC.film_likes
(
    film_like_id INTEGER NOT NULL AUTO_INCREMENT,
    film_id      INTEGER NOT NULL,
    user_id      INTEGER NOT NULL,
    CONSTRAINT FILM_LIKES_PK PRIMARY KEY (film_like_id),
    CONSTRAINT FILM_LIKES_FILMS_FK FOREIGN KEY (film_id) REFERENCES PUBLIC.films (film_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FILM_LIKES_USERS_FK FOREIGN KEY (user_id) REFERENCES PUBLIC.users (user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    CONSTRAINT FILM_LIKES_UNIQUE_FILM_USER UNIQUE (film_id, user_id)
);
CREATE INDEX IF NOT EXISTS FILM_LIKES_FILMS_FK_INDEX_7 ON PUBLIC.film_likes (film_id);
CREATE INDEX IF NOT EXISTS FILM_LIKES_USERS_FK_INDEX_7 ON PUBLIC.film_likes (user_id);

-- PUBLIC.FRIENDSHIPS
CREATE TABLE IF NOT EXISTS PUBLIC.friendships
(
    user_id   INTEGER NOT NULL,
    friend_id INTEGER NOT NULL,
    CONSTRAINT FRIENDSHIPS_PK PRIMARY KEY (user_id, friend_id),
    CONSTRAINT FRIENDSHIPS_USERS_FK FOREIGN KEY (user_id) REFERENCES PUBLIC.users (user_id) ON DELETE CASCADE ON UPDATE CASCADE
);
CREATE INDEX IF NOT EXISTS FRIENDSHIPS_USERS_FK_INDEX_D ON PUBLIC.friendships (user_id);
